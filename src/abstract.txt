Modern Computer-Aided Design (CAD) applications need to employ, to a lesser or
greater extent, Geometric Constraints (GCs) that condition the geometric models
being produced.  However, these applications prove insufficient for the
production of complex and sophisticated designs.  In response to this
limitation, a new paradigm named Algorithmic Design (AD) emerged.  It
comprehends the creation of designs through algorithmic specifications, enabling
the automation of repetitive tasks.  Alas, it is not yet as widespread as more
traditional methods, partially due to the added time, effort, and expertise
required to specify relations between objects.  This can be mitigated through
the incorporation of GC functionality in AD tools to help bridge the gap between
AD and more traditional paradigms.  The focus of this work is the creation, and
implementation, of primitive GC functionality, supported by a mature geometric
computation library, that facilitates the specification of geometric forms.  We
benchmark our solution's performance, as well as test it with two different
constraint-ridden shapes inspired by existing designs, highlighting two
different approaches: an analytic approach, naturally used in programming, and a
constructive approach, the one our solution is based on.  Additionally, we
explore beneficial side effects of our implementation regarding the repurposing
of more complex functionality with very little extra effort.  We conclude our
solution's approach proves more comprehensible and intuitive for practitioners.
